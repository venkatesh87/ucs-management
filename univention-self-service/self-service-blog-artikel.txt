Mit der Version 4.1 von Univention Corporate Server führt Univention einen Dienst ein, der Benutzern und Administratoren gleichermaßen das Leben erleichtert: die Univention Self-Service-Module. Sie erlauben es Benutzern selbständig (ohne Administratorunterstützung) ihre Daten zu verändern.

Zwei Module werden gibt es bisher: "Passwort ändern" und "Passwort zurücksetzen". Bei "Passwort ändern" handelt es sich um eine Webseite, auf der Benutzer ihr (abgelaufenes) Passwort ändern können, solange sie sich noch an ihr bestehendes erinnern. Bei "Passwort zurücksetzen" können Benutzer, die ihr Passwort vergessen haben, auf einer Webseite veranlassen, dass ihnen ein Schlüssel (Token) an eine zuvor hinterlegte Adresse geschickt wird. Beide Module sind über die Übersichtsseite des UCS Servers erreichbar.

Die Univention Self-Service-Module sind über das AppCenter auf Servern in den Rollen Domänencontroller Master und Domänencontroller Backup installierbar.

= App-Hersteller =

Für Hersteller von Apps interessant: wenn sie beim Login eines Benutzers in ihre App feststellen, dass dessen Passwort abgelaufen ist, könne ihm nun einen Link anbieten um sein Passwort zu erneuern. Der Link ist in der UCR Variablen ucs/web/overview/entries/service/passwordchange/link gespeichert (bzw. ucs/web/overview/entries/service/passwordchange/link/de um Deutsch als Sprache voreinzustellen).

= Kontakt hinterlegen =

Administratoren die das "Passwort zurücksetzen"-Modul einsetzen wollen, sollten ihre Benutzer darauf hinweisen, dass sie möglichst zügig auf der Webseite ihre Kontaktdaten hinterlegen, da sie dafür ihr aktuelles Passwort benötigen. Benutzer ohne abgespeicherten Kontakt können den Dienst später nicht verwenden, wenn sie ihr Passwort vergessen. Die Daten können vom Administrator im Benutzer-Modul der Univention Management Console im Tab "Passwort-Wiederherstellung" eingesehen werden.

= Konfiguration =

Während es für den einfachen Passwortwechsel (Modul "passwordchange") nichts einzustellen gibt, ist das Modul um Passwörter zurückzusetzen ("passwordreset") so gestaltet worden, dass es für möglichst viele verschiedene Umgebungen angepasst werden kann. Es können Berechtigungen, Länge der Schlüssel (Token) und die Art ihres Versands eingestellt werden.

Es ist nur der Versand des Tokens via E-Mail aktiviert.

Um alle relevanten UCR-Variablen zu sehen, suchen sie nach "self-service":
<code>ucr search --brief self-service</code>
Die Option "--brief" bewirkt eine kompaktere Darstellung, da die Beschreibungen der Variablen nicht mit ausgedruckt werden.

== Berechtigungen ==

Die UCR-Variablen "umc/self-service/passwordreset/blacklist/*" und "umc/self-service/passwordreset/whitelist/*" können verwendet werden um Benutzern und Gruppen den Zugriff auf den Dienst zu erlauben. In der Standardeinstellung ist es allen Benutzern die in der Gruppe "Domain Users", nicht aber in den Gruppen "Administrators" oder "Domain Admins" sind, erlaubt den Dienst zu nutzen.
<code>ucr search umc/self-service/passwordreset/.*list</code>

== Schlüssellänge ==

Die Länge des zu versendenden Schlüssels (Token) kann pro Versandmethode eingestellt werden. In eine SMS passen nicht nur weniger Zeichen als in eine E-Mail, der Token muss vermutlich auch abgetippt werden. Ein langer Token in einer E-Mail kann kann von Benutzern kopiert, oder ein Link angeklick werden. Ein Token gilt immer nur eine Stunde lang, und verfällt dann automatisch. In dieser Stunde kann ein Benutzer keinen neuen Token anfordern. Die TokenStandardlängen der Token sind in den Beschreibungen der UCR-Variablen zu finden:
<code>ucr search umc/self-service/passwordreset/.*/token_length</code>

== Versand ==

Der Versand der Token kann mit verschiedenen Methoden erfolgen. In der Standardeinstellung ist nur "E-Mail" aktiviert.
<code>ucr search umc/self-service/passwordreset/.*/enabled</code>
Die für den Versand per E-Mail, SMS oder beliebiger anderer Methoden nötige Konfiguration wird im Folgenden erklärt.

=== E-Mail ===

Für den Versand per E-Mail muss ein Mail-Server konfiguriert werden. Dessen Name oder IP-Adresse wird in der UCR-Variablen umc/self-service/passwordreset/email/server gespeichert. Der Mail-Server muss die E-Mails ohne Passwort annehmen und weiterleiten. Standardmäßig geht das nur auf "localhost". Das Mailsystem muss ausgehende E-Mails direkt oder über ein Mail-Relay zustellen. Nähere Hinweise zur <a href="http://docs.software-univention.de/handbuch.html#mail::serverconfig::relay">Konfiguration eines Mail-Relays</a> finden sich im UCS-Handbuch.

Die zu versendende Nachricht wird aus einer Textdatei erzeugt. Mit der UCR-Variablen umc/self-service/passwordreset/email/text_file kann bestimmt werden welche dafür verwendet wird. Um den Text anzupassen sollte die Datei mit dem Standardtext von /usr/share/pyshared/univention/management/console/modules/passwordreset/sending/email_body.txt irgendwo hinkompiert und editiert werden. Der Pfad zur neuen Datei wird dann in der UCR-Variablen gesetzt.

Vor dem Versand werden folgende Zeichenketten in dem Text ersetzt:
* {username}: Der Benutzer der sein Passwort zurücksetzen möchte.
* {token}: Zu versendender Token.
* {link}: Link zur "Passwort Zurücksetzen"-Webseite.
* {tokenlink}: Link zur "Passwort Zurücksetzen"-Webseite mit Benutzername und Token vorausgefüllt.

=== SMS ===

Leider gibt es keinen Standard für SMS-Gateways im Internet. Das Self-Service-Modul wurde deshalb so gestaltet, dass die Einbindung externer Programme möglichst einfach ist. Zu diesem Zweck können folgende UCR-Variablen konfiguriert werden:
<code>ucr search umc/self-service/passwordreset/sms</code>

* umc/self-service/passwordreset/sms/command: Das Programm das zum Versand einer SMS vom Self-Service-Modul aufgerufen wird, z.B. "/usr/local/sbin/send_sms". Alle benötigten Daten werden in Umgebungsvariablen übergeben. >>>Hinweis und Link zum Beispielprogramm für Sipgate, siehe Kapitel "Anhang".<<<
* umc/self-service/passwordreset/sms/country_code: Nationale Vorwahl die möglicherweise einer Handynummer vorangestellt werden muss, z.B. "49". Wenn Ihre SMS-Software dies nicht benötigt, geben Sie trotzdem eine Zahl an.
* umc/self-service/passwordreset/sms/password_file: Eine Textdatei mit Name und Passwort für den von Ihnen verwendeten SMS-Dienst, z.B. "/etc/sip-password.txt". Die Datei sollte genau eine Zeile beinhalten: "Username:Passwort". Wenn Ihre SMS-Software dies nicht benötigt, erstellen Sie bitte trotzdem solche eine Datei.

Dem aufgerufenen Progamm werden Daten in den folgenden Umgebungsvariablen übergeben:
* selfservice_username: Der Benutzer der sein Passwort zurücksetzen möchte.
* selfservice_address: Handynummer des Benutzers.
* selfservice_token: Zu versendender Token.
* sms_country_code: Inhalt von umc/self-service/passwordreset/sms/country_code.
* sms_username: Das was in umc/self-service/passwordreset/sms/password_file vor dem Doppelpunkt steht.
* sms_password: Das was in umc/self-service/passwordreset/sms/password_file nach dem Doppelpunkt steht.

Werden vom angegebenen Programm weitere Programme gestartet, sollten sicherheitshalber die Umgebungsvariablen mit Passwort und Token gelöschen werden, da Umgebungsvariablen an Kindprozesse vererbt werden.

Probleme und Tipps zur Implementierung können gerne hier in Kommentaren oder im <a href="https://forum.univention.de/">Forum</a> diskuttiert werden.

=== Anders (>>>besserer Titel?<<<) ===

Es werden auch andere Versandmethoden als E-Mail und SMS unterstützt. Wie bei SMS wird ein Programm zum Versand gestartet. Zur Konfiguration stehen folgende UCR-Variablen zur Verfügung:
<code>ucr search umc/self-service/passwordreset/external</code>

* umc/self-service/passwordreset/external/command: Das zum Versand aufzurufende Programm - wie bei SMS, z.B. "/usr/local/sbin/send_with_jabber".
* umc/self-service/passwordreset/external/method: Bezeichnung die intern zur Unterscheidung der Module verwendet wird, z.B. "xmpp". Darf nicht "email" oder "mobile" heißen.
* umc/self-service/passwordreset/external/method_label: Die Bezeichnung der Methode, wie sie auf der Webseite angezeigt wird, z.B. "Jabber".
* umc/self-service/passwordreset/external/udm_property: Name des Attributes des Benutzermoduls aus dem der Kontakt ausgelesen werden soll, z.B. "description". Das E-Mail-Modul verwendet "PasswordRecoveryEmail", das SMS-Modul "PasswordRecoveryMobile". Um alle bekannten Attribute gelistet zu bekommen, kann folgendes ausgeführt werden:
<code>udm users/user</code>

Dem aufgerufenen Progamm werden, wie beim SMS-Modul, Daten in den folgenden Umgebungsvariablen übergeben:
* selfservice_username: Der Benutzer der sein Passwort zurücksetzen möchte.
* selfservice_address: Handynummer des Benutzers.
* selfservice_token: Zu versendender Token.

Der Sicherheitshinweis bzgl. des Vererbens von Umgebungsvariablen gilt auch hier.

>>>Beispiel-Code unten, evtl. hier verlinken.<<<

= >> Überschrift oder nicht? << =

Wir hoffen die Benutzung und Administration von UCS-Domänen mit den Self-Service-Modulen weiter zu vereinfachen. Gerne würden wir hier von Ihren Erfahrungen hören, in welcher Form Sie sie einsetzen und wie Ihre Benutzer sie annehmen. (>>> So direkt ansprechen? Post-count auf dem Blog erhöhen oder unseriös? <<<)


= Anhang =

>>> Der folgende Code kann auch in einen Kommentar oder vielleicht sogar besser irgendwohin hochgeladen und dann verlinkt werden. ACHTUNG: die Einrückungen sind sehr wichtig! Bitte entsprechend oben bei "umc/self-service/passwordreset/sms/command" bzw. "Anders" verlinken. <<<



Beispiel Programm zum Versand von SMS mit Sipgate.

------------------------------------------------------------------------------

# ucr set umc/self-service/passwordreset/sms/command=/usr/local/sbin/sipgate_sms.py \
	umc/self-service/passwordreset/sms/country_code: 49 \
	umc/self-service/passwordreset/sms/enabled=yes \
	umc/self-service/passwordreset/sms/password_file=/etc/sipgate.pw

# echo "myaccount:s3cr3t" > /etc/sipgate.pw
# chmod 600 /etc/sipgate.pw

----------------------   sipgate_sms.py   ------------------------------------

#!/usr/bin/python2.7
# -*- coding: utf-8 -*-

import os
import sys
import xmlrpclib

env = os.environ

# create XMLRPC proxy
xmlrpc_url = "https://{username}:{password}@samurai.sipgate.net/RPC2".format(username=env["sms_username"], password=env["sms_password"])
rpc_srv = xmlrpclib.ServerProxy(xmlrpc_url)

# identify myself
reply = rpc_srv.samurai.ClientIdentify({
	"ClientName": "Univention Self Service (python xmlrpclib)",
	"ClientVersion": "1.0",
	"ClientVendor": "https://www.univention.com/"
})
print "Login success. Server reply to ClientIdentify(): '{}'.".format(reply)

# create text message
msg = "Password reset token: {token}".format(token=env["selfservice_token"])
if len(msg) > 160:
	raise ValueError("Message to long: '{}'.".format(msg))

# Sipgate wants phone numbers in E.164 format
num = "".join(map(lambda x: x if x.isdigit() else "", env["selfservice_address"]))
if num.startswith("00"):
	num = num[2:]
elif num.startswith("0"):
	num = "{}{}".format(env["sms_country_code"], num[1:])
else:
	pass

# send message
args = {"RemoteUri": "sip:%s@sipgate.net" % num, "TOS": "text", "Content": msg}
reply = rpc_srv.samurai.SessionInitiate(args)

if reply.get("StatusCode") == 200:
	print "Success sending token to user {}.".format(env["selfservice_username"])
	sys.exit(0)
else:
	print "Error sending token to user {}. Sipgate returned: {}".format(env["selfservice_username"], reply)
	sys.exit(1)

------------------------------------------------------------------------------

>>> Der folgende Code kann auch in einen Kommentar oder vielleicht sogar besser irgendwohin hochgeladen und dann verlinkt werden. ACHTUNG: die Einrückungen sind sehr wichtig! Bitte entsprechend oben bei "Anders" verlinken. <<<

------------------------------------------------------------------------------

Beispiel Programm zum Versand von Jabber-Nachrichten.

------------------------------------------------------------------------------

# ucr set repository/online/unmaintained="yes"
# univention-install sendxmpp
# ucr set repository/online/unmaintained="no"

# cat > /usr/local/sbin/send_jabber <<EOF
#!/bin/sh

echo "Hello \$username, your password recovery token is \$token. Greetings, Administrator" | sendxmpp -f /etc/send_jabber.cfg --tls "\$address"
EOF

# chmod a+x /usr/bin/send_jabber
# echo "sampleaccount@jabber.org myPassW0rd" > /etc/send_jabber.cfg
# chmod 0600 /etc/send_jabber.cfg

# ucr set umc/self-service/passwordreset/external/enabled='yes' \
	umc/self-service/passwordreset/external/command="/usr/local/sbin/send_jabber" \
	umc/self-service/passwordreset/external/method=xmpp \
	umc/self-service/passwordreset/external/method_label=Jabber \
	umc/self-service/passwordreset/external/token_length=12 \
	umc/self-service/passwordreset/external/ldap_attribute=description

# eval "$(ucr shell)"
# udm users/user modify --dn "uid=user1,cn=users,$ldap_base" \
	--set description="user1@jabber.org"

→ Nun sollte bei einem Benutzer "user1" die Methode "Jabber" auf der Webseite zur Passwortwiederherstellung auftauchen. Wird diese gewählt, wird "/usr/local/sbin/send_jabber" ausgeführt.

