#!/usr/bin/python2.7
# -*- coding: utf-8 -*-
#
# Univention Joinscripts
"""Install join scripts."""
#
# Copyright 2015-2017 Univention GmbH
#
# http://www.univention.de/
#
# All rights reserved.
#
# The source code of this program is made available
# under the terms of the GNU Affero General Public License version 3
# (GNU AGPL V3) as published by the Free Software Foundation.
#
# Binary versions of this program provided by Univention to you as
# well as other copyrighted, protected or trademarked materials like
# Logos, graphics, fonts, specific documentations and configurations,
# cryptographic keys etc. are subject to a license agreement between
# you and Univention and not subject to the GNU AGPL V3.
#
# In the case you use this program under the terms of the GNU AGPL V3,
# the program is provided in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public
# License with the Debian GNU/Linux or Univention distribution in file
# /usr/share/common-licenses/AGPL-3; if not, see
# <http://www.gnu.org/licenses/>.

import os
import sys
import re
import subprocess
from optparse import OptionParser

from univention.debhelper import doIt, binary_packages


def debhelper_file(package, ext):
	"""Name of a package configuration file."""
	return os.path.join('debian', '%s.%s.debhelper' % (package, ext))


JOINSCRIPT_DIR = '/usr/lib/univention-install'
UNJOINSCRIPT_DIR = '/usr/lib/univention-uninstall'


def _install_script(package, script_name, script_dir, dest_filename=None):
	for filename in os.listdir('.'):
		if re.match(r'^\d\d%s$' % re.escape(script_name), filename):
			dest_path = os.path.join('debian', package, script_dir[1:])
			doIt('install', '-m', '755', '-d', dest_path)

			if dest_filename is None:
				dest_filename = filename
			dest_filename = os.path.join(dest_path, os.path.basename(dest_filename))
			doIt('install', '-m', '755', filename, dest_filename)

			return filename


def install_joinscript(package, unjoinscript_name=None):
	joinscript_name = _install_script(package, '%s.inst' % package, JOINSCRIPT_DIR)
	if joinscript_name:
		source = open(joinscript_name).readlines()
		if 'python' in source[0] and not unjoinscript_name:
			output = subprocess.check_output([os.path.join('.', joinscript_name), '--supports-unjoin'])
			if output == '1\n':
				base, ext = os.path.splitext(joinscript_name)
				match = re.match(r'^\d+', base)
				if match:
					base = '%02d%s' % (99 - int(match.group()), base[match.end():])
				unjoinscript_name = base + '-uninstall.uinst'
				_install_script(package, 'inst', UNJOINSCRIPT_DIR, unjoinscript_name)
			doIt('perl', '-e', 'use Debian::Debhelper::Dh_Lib;addsubstvar("%s", "misc:Depends", "univention-join (>= 7.1.1-2)");' % package)
		with open(debhelper_file(package, 'postinst'), 'a') as postinst:
			postinst.write('# Automatically added by univention-install-joinscript\n')
			postinst.write('. /usr/share/univention-lib/all.sh\n')
			postinst.write('call_joinscript "%s" || true\n' % joinscript_name)
			if unjoinscript_name:
				postinst.write('\n')
				postinst.write('if [ "$1" = "configure" ]; then\n')
				postinst.write('  uinst="%s/%s"\n' % (JOINSCRIPT_DIR, unjoinscript_name))
				postinst.write('  [ -e "$uinst" ] && rm "$uinst"\n')
				postinst.write('fi\n')
			postinst.write('# End automatically added section\n')

	return joinscript_name


def install_unjoinscript(package):
	unjoinscript_name = _install_script(package, '%s.uinst' % package, UNJOINSCRIPT_DIR) or _install_script(package, '%s-uninstall.uinst' % package, UNJOINSCRIPT_DIR)
	if unjoinscript_name:
		with open(debhelper_file(package, 'prerm'), 'a') as prerm:
			prerm.write('# Automatically added by univention-install-joinscript\n')
			prerm.write('if [ "$1" = "remove" ]; then\n')
			prerm.write('  cp "%s/%s" "%s"\n' % (UNJOINSCRIPT_DIR, unjoinscript_name, JOINSCRIPT_DIR))
			prerm.write('fi\n')
			prerm.write('# End automatically added section\n')

		with open(debhelper_file(package, 'postrm'), 'a') as postrm:
			postrm.write('# Automatically added by univention-install-joinscript\n')
			postrm.write('if [ "$1" = "remove" ]; then\n')
			postrm.write('  . /usr/share/univention-lib/all.sh\n')
			postrm.write('  call_unjoinscript "%s" || true\n' % unjoinscript_name)
			postrm.write('fi\n')
			postrm.write('# End automatically added section\n')

	return unjoinscript_name


def main():
	"""Install (un)joinscripts."""
	usage = "%prog"
	epilog = '''This is a debhelper like
program to install Joinscripts and Unjoinscripts into the package build directories.

The joinscript *.inst goes to /usr/lib/univention-install/
The unjoinscript *.uinst goes to /usr/lib/univention-uninstall/
	'''
	parser = OptionParser(usage=usage, epilog=epilog)
	parser.add_option('-v', '--verbose',
			dest='verbose', action='store_true',
			help='Verbose mode: show all commands that modify the package build directory.')
	options, args = parser.parse_args()
	if options.verbose:
		os.environ['DH_VERBOSE'] = '1'
	if args:
		parser.error('No argument expected')

	try:
		for package in binary_packages():
			unjoinscript_name = install_unjoinscript(package)
			install_joinscript(package, unjoinscript_name)
	except IOError as ex:
		print >> sys.stderr, ex
		sys.exit(1)


if __name__ == '__main__':
	main()
