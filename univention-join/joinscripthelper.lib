# Helper lib for writing join-scripts.
#
# Copyright 2004-2017 Univention GmbH
#
# http://www.univention.de/
#
# All rights reserved.
#
# The source code of this program is made available
# under the terms of the GNU Affero General Public License version 3
# (GNU AGPL V3) as published by the Free Software Foundation.
#
# Binary versions of this program provided by Univention to you as
# well as other copyrighted, protected or trademarked materials like
# Logos, graphics, fonts, specific documentations and configurations,
# cryptographic keys etc. are subject to a license agreement between
# you and Univention and not subject to the GNU AGPL V3.
#
# In the case you use this program under the terms of the GNU AGPL V3,
# the program is provided in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public
# License with the Debian GNU/Linux or Univention distribution in file
# /usr/share/common-licenses/AGPL-3; if not, see
# <http://www.gnu.org/licenses/>.
#
# Usage:
#--------------------------------------------------------------------
#VERSION=x
#. /usr/share/univention-join/joinscripthelper.lib
#joinscript_init
#
# Do fancy stuff
#
#joinscript_save_current_version
#--------------------------------------------------------------------

JS_STATUSFILE="/var/univention-join/status"

JS_RUNNING_FILENAME="$0"
JS_SCRIPT_FULLNAME=
JS_PACKAGE=
#The Value 0 means, that the script has never been executed.
JS_LAST_EXECUTED_VERSION=

#Returns 0 if any version of the script has been previously executed, 1 otherwise
joinscript_check_any_version_executed () {
	touch "$JS_STATUSFILE"
	if grep -qs -E "^$JS_PACKAGE v[0-9]+ successful" "$JS_STATUSFILE"; then
		return 0
	else
		return 1
	fi
}

#Requires 1 parameter specifying the version to check for.
#
#Returns 0 if the specified version of the script has been previously
#executed, 1 otherwise.
joinscript_check_specific_version_executed () {
	local version="$1"

	if ! joinscript_is_version "$version"; then
		joinscript_abort "joinscript_check_specific_version_executed: version: not a valid version"
	fi

	touch "$JS_STATUSFILE"
	if grep -qs "^$JS_PACKAGE v$version successful" "$JS_STATUSFILE"; then
		return 0
	else
		return 1
	fi
}

#Requires 2 parameters specifying the minimum and maximum version to check for.
#
#Returns 0 if any version of the script within the specified range has been previously
#executed, 1 otherwise.
joinscript_check_version_in_range_executed () {
	local min="$1"
	local max="$2"

	if ! joinscript_is_version "$min"; then
		joinscript_abort "joinscript_check_version_in_range_executed: min: expecting valid versionnumber"
	fi

	if ! joinscript_is_version "$max"; then
		joinscript_abort "joinscript_check_version_in_range_executed: max: expecting valid versionnumber"
	fi

	if [ "$min" -gt "$max" ]; then
		joinscript_abort "joinscript_check_version_in_range_executed: min > max"
	fi

	for i in $( seq "$min" "$max" )
	do
		if joinscript_check_specific_version_executed "$i"; then
			return 0
		fi
	done

	return 1
}

#Permanently stores the current execution of the script
joinscript_save_current_version () {

	echo "$(date --rfc-3339=ns) (in joinscript_save_current_version)"

	if ! joinscript_check_specific_version_executed "$VERSION"; then
	    echo "$JS_PACKAGE v$VERSION successful" >>"$JS_STATUSFILE"
	fi

	if [ "$VERSION" -gt "$JS_LAST_EXECUTED_VERSION" ]; then
		JS_LAST_EXECUTED_VERSION="$VERSION"
	fi
}

joinscript_get_last_executed_version () {

	if [ -n "$JOIN_FORCE" ]; then
		JS_LAST_EXECUTED_VERSION=0
		return 0
	fi

	if ! joinscript_check_any_version_executed; then
		JS_LAST_EXECUTED_VERSION=0
		return 0
	fi

	JS_LAST_EXECUTED_VERSION=$(grep -E "^$JS_PACKAGE v[0-9]+ successful" "$JS_STATUSFILE" \
		| sed "s/^$JS_PACKAGE v//" \
		| sed "s/ successful.*$//" \
		| sort -n \
		| tail -n 1)

	if ! joinscript_is_version "$JS_LAST_EXECUTED_VERSION"; then
		return 1
	fi

	return 0
}

# Removes a given join script from index file
joinscript_remove_script_from_status_file () {
	local scriptname="$1"
	sed -i "/^$scriptname v/d" $JS_STATUSFILE
}

joinscript_check_joinstatus () {
	if [ ! -f "/var/univention-join/joined" ]; then
		return 1
	fi

	return 0
}

joinscript_check_already_executed () {
	if joinscript_check_specific_version_executed "$VERSION"; then
		return 0
	fi

	return 1
}

joinscript_is_version () {
	local var="$1"

	if [ -z "$var" ] \
		|| [ ! -z "$(echo "$var" | tr -d '0-9')" ] \
		|| [ "$var" -lt 1 ]; then

		return 1
	fi

	return 0
}

joinscript_abort () {
	echo "$1"
	exit 1
}

joinscript_get_package_name () {
	if [ ! -f "$JS_SCRIPT_FULLNAME" ]; then
		return 1
	fi

	JS_PACKAGE="$(echo ${JS_SCRIPT_FULLNAME%.inst} | sed 's/.*\///' | sed 's/^[0-9][0-9]//')"
	if [ -z "$JS_PACKAGE" ]; then
		return 1
	fi

	return 0
}

joinscript_extern_init () {
	JS_SCRIPT_FULLNAME="$1"

	if ! joinscript_get_package_name; then
		return 1
	fi

	local version_definition="$(grep -E "^[[:space:]]*VERSION=([1-9][0-9]*|\"[1-9][0-9]*\"|'[1-9][0-9]*')[[:space:]]*$" "$JS_SCRIPT_FULLNAME")"
	VERSION=
	eval "$version_definition"

	if ! joinscript_is_version "$VERSION"; then
		return 1
	fi

	if ! joinscript_get_last_executed_version; then
		return 1
	fi

	return 0
}

joinscript_init () {
	JS_SCRIPT_FULLNAME="$(readlink -f "$JS_RUNNING_FILENAME")"

	echo "$(date --rfc-3339=ns) (in joinscript_init)"

	if ! joinscript_get_package_name; then
		joinscript_abort "Unable to determine package name from file \"$JS_SCRIPT_FULLNAME\""
	fi

	if ! joinscript_is_version "$VERSION"; then
		joinscript_abort "The variable VERSION must be set to an integer value greater than zero before calling joinscript_init"
	fi

	if ! joinscript_check_joinstatus; then
		joinscript_abort "The server has not joined yet"
	fi

	if [ -z "$JOIN_FORCE" ] && joinscript_check_already_executed; then
		# This is the special case, where it would be nicer to have a different
		# exit-code, but exit-code 1 is still returned in order not to break
		# compatibility with join-scripts, that don't use this lib yet.
		exit 1
	fi

	if ! joinscript_get_last_executed_version; then
		joinscript_abort "Error determining last executed version"
	fi
}

die () {
    exit $?
}

# vim:set ft=sh:
