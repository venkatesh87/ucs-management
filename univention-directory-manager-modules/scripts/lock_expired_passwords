#!/usr/bin/python2.7
# -*- coding: utf-8 -*-
#
# Univention Directory Manager
#
# Copyright 2014-2017 Univention GmbH
#
# http://www.univention.de/
#
# All rights reserved.
#
# The source code of this program is made available
# under the terms of the GNU Affero General Public License version 3
# (GNU AGPL V3) as published by the Free Software Foundation.
#
# Binary versions of this program provided by Univention to you as
# well as other copyrighted, protected or trademarked materials like
# Logos, graphics, fonts, specific documentations and configurations,
# cryptographic keys etc. are subject to a license agreement between
# you and Univention and not subject to the GNU AGPL V3.
#
# In the case you use this program under the terms of the GNU AGPL V3,
# the program is provided in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public
# License with the Debian GNU/Linux or Univention distribution in file
# /usr/share/common-licenses/AGPL-3; if not, see
# <http://www.gnu.org/licenses/>.

import sys
import time
import optparse
import univention.uldap
import univention.admin.uldap
import univention.admin.modules as udm_modules
import univention.config_registry
import univention.debug as ud


def main():
	usage = """%progname <options>

This script searches for user accounts with expired password. For all found
user accounts the posix login will be disabled."""
	parser = optparse.OptionParser(usage=usage)
	parser.add_option("-n", "--dry-run", dest="dry_run", default=False, action="store_true", help="perform only a dry run (disables --quiet)")
	parser.add_option("-q", "--quiet", dest="verbose", default=True, action="store_false", help="write process messages to logfile only")
	(options, args) = parser.parse_args()

	if options.dry_run:
		options.verbose = True

	def print_msg(msg, newline=True):
		if options.verbose:
			if newline:
				print msg
			else:
				print msg,

	ucr = univention.config_registry.ConfigRegistry()
	ucr.load()

	if ucr.get('server/role') != 'domaincontroller_master':
		print_msg('ERROR: this script may only be called on a domaincontroller_master')
		sys.exit(1)

	print_msg('Initializing... (%s)' % (time.ctime()))
	ud.init('/var/log/univention/lock_expired_passwords.log', 1, 0)
	ud.set_level(ud.MAIN, ud.ALL)

	udm_modules.update()
	lo, position = univention.admin.uldap.getAdminConnection()
	udm_modules.init(lo, position, udm_modules.get('users/user'))

	print_msg('Searching for expired user passwords...')

	ldap_filter = '(shadowMax=*)'
	results = udm_modules.lookup('users/user', None, lo, scope='sub', filter=ldap_filter)
	for entry in results:
		entry.open()
		if time.mktime(time.strptime(entry['passwordexpiry'], '%Y-%m-%d')) > time.time():  # convert password expiry date to local timezone and compare with local time
			continue

		if not entry['locked'] in ('posix', 'all'):
			if entry['locked'] == 'none':
				entry['locked'] = 'posix'
			else:
				entry['locked'] = 'all'
		else:
			# account is already locked
			continue

		if options.dry_run:
			print_msg('password of uid=%s expired at %s ... skipped due to dry run (expected modification: locked=%r)' % (entry['username'], entry['passwordexpiry'], entry['locked'],))
		else:
			print_msg('password of uid=%s expired at %s ...' % (entry['username'], entry['passwordexpiry']), newline=False)
			entry.modify()
			ud.debug(ud.MAIN, ud.PROCESS, 'password of uid=%s expired at %s ... modified (locked=%r)' % (entry['username'], entry['passwordexpiry'], entry['locked']))
			print_msg('modified (locked=%r)' % (entry['locked'],))


if __name__ == '__main__':
	main()
