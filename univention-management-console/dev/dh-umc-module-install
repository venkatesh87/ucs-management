#!/usr/bin/python2.7
# -*- coding: utf-8 -*-
#
# Univention Management Console
"""
Install UMC modules. It parses a RFC 822 file called
$(package).umc-modules and installs the specified components of a module
into the correct directories.
"""
#
# Copyright 2011-2017 Univention GmbH
#
# http://www.univention.de/
#
# All rights reserved.
#
# The source code of this program is made available
# under the terms of the GNU Affero General Public License version 3
# (GNU AGPL V3) as published by the Free Software Foundation.
#
# Binary versions of this program provided by Univention to you as
# well as other copyrighted, protected or trademarked materials like
# Logos, graphics, fonts, specific documentations and configurations,
# cryptographic keys etc. are subject to a license agreement between
# you and Univention and not subject to the GNU AGPL V3.
#
# In the case you use this program under the terms of the GNU AGPL V3,
# the program is provided in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public
# License with the Debian GNU/Linux or Univention distribution in file
# /usr/share/common-licenses/AGPL-3; if not, see
# <http://www.gnu.org/licenses/>.

import os
import sys
import subprocess
from optparse import OptionParser
from xml.sax.saxutils import escape

import univention.debhelper as dh_ucs
try:
	sys.path.insert(0, './dev')
	import dh_umc
except ImportError:
	import univention.dh_umc as dh_umc


class Module(object):

	def __init__(self, module):
		self.module = module
		self.destdir = os.path.join('debian', self.module.package)
		self.languages = dh_umc.LANGUAGES

	def dh_module_install(self):
		self.install_xml()
		self.install_categories()
		self.install_python()
		self.install_javascript()
		self.install_html_css()
		self.install_icons()
		joinscript = self.install_joinscript()
		self.install_deb_scripts(joinscript)

	def install_xml(self):
		if not self.module.xml_definition:
			print >> sys.stderr, 'I: no module definition file'
			return
		target = os.path.join(self.destdir, 'usr/share/univention-management-console/modules')
		dh_ucs.doIt('install', '-d', target)
		dh_ucs.doIt('install', '-m', '644', self.module.xml_definition, target)
		destination = os.path.join(target, os.path.basename(self.module.xml_definition))
		if os.path.exists(destination):
			# add paackage version to installed XML file
			version = subprocess.check_output('dpkg-parsechangelog | sed -ne "s/^Version: //p"', shell=True).strip()
			with open(destination, 'rb') as fd:
				content = fd.read().replace('</module>', '\t<version>%s</version>\n\t</module>' % (escape(version),))
			with open(destination, 'wb') as fd:
				fd.write(content)

		# copy translation files (xml)
		target_i18n = os.path.join(self.destdir, 'usr/share/univention-management-console/i18n/%%s/%(Module)s.mo' % self.module)
		for lang in self.languages:
			mo_file = os.path.join(os.path.dirname(self.module.xml_definition), '%s.mo' % lang)
			dh_ucs.doIt('install', '-m', '644', '-D', mo_file, target_i18n % (lang,))

	def install_categories(self):
		if not self.module.xml_categories:
			print >> sys.stderr, 'I: no category definition file'
			return

		target = os.path.join(self.destdir, 'usr/share/univention-management-console/categories')
		dh_ucs.doIt('install', '-d', target)
		dh_ucs.doIt('install', '-m', '644', self.module.xml_categories, target)

	def install_python(self):
		target = os.path.join(self.destdir, 'usr/share/pyshared/univention/management/console/modules/%(Module)s' % self.module)
		python_files = list(self.module.python_files)

		if not python_files:
			print >> sys.stderr, 'I: no python files found in %s' % (self.module.python_path,)
			return

		for src_file in python_files:
			target_file = os.path.join(target, src_file[len(self.module.python_path):])
			target_dir = os.path.dirname(target_file)
			if not os.path.exists(target_dir):
				dh_ucs.doIt('install', '-d', target_dir)
			dh_ucs.doIt('install', '-m', '644', src_file, target_file)

		# copy translation files (python)
		target_i18n = os.path.join(self.destdir, 'usr/share/locale/%s/LC_MESSAGES/')
		for lang in self.languages:
			mo_file = os.path.join(self.module.python_path, '%s.mo' % lang)
			if not os.path.exists(mo_file):
				print >> sys.stderr, 'W: no translation file %r found' % (mo_file,)
				continue
			destdir_i18n = target_i18n % (lang,)
			dh_ucs.doIt('install', '-d', destdir_i18n)
			dh_ucs.doIt('install', '-m', '644', mo_file, os.path.join(destdir_i18n, '%(package)s.mo' % self.module))

	def install_javascript(self):
		target = 'usr/share/univention-management-console-frontend/js/umc/modules/'
		js_files = list(self.module.js_files)

		if not js_files:
			print >> sys.stderr, 'I: no javascript files found in %s' % (self.module.js_path,)
			return

		for src_file in js_files:
			target_file = os.path.join(self.destdir, target, src_file[len(self.module.js_path):])
			target_dir = os.path.dirname(target_file)
			if not os.path.exists(target_dir):
				dh_ucs.doIt('install', '-d', target_dir)
			dh_ucs.doIt('install', '-m', '644', src_file, target_file)

		# copy translation files (javascript)
		target_i18n = os.path.join(self.destdir, 'usr/share/univention-management-console-frontend/js/umc/modules/i18n/%%s' % self.module)
		for lang in self.languages:
			json_file = os.path.join(self.module.js_path, '%s.json' % lang)
			if not os.path.exists(json_file):
				print >> sys.stderr, 'W: no translation file %r found' % (json_file,)
				continue
			destdir_i18n = target_i18n % (lang,)
			dh_ucs.doIt('install', '-d', destdir_i18n)
			dh_ucs.doIt('install', '-m', '644', json_file, os.path.join(destdir_i18n, '%(Module)s.json' % self.module))

	def install_html_css(self):
		for src_file in list(self.module.html_files) + list(self.module.css_files):
			target = os.path.join(self.destdir, 'usr/share/univention-management-console-frontend/js/umc/modules/%s' % (src_file[len(self.module.js_path):]))
			dh_ucs.doIt('install', '-m', '644', src_file, target)

	def install_icons(self):
		if self.module.icons is None:
			return
		if not os.path.isdir(self.module.icons):
			print >> sys.stderr, 'W: could not find icon directory %s' % (self.module.icons,)
			return

		for dirname, dirs, files in os.walk(self.module.icons):
			if '.svn' in dirs:
				dirs.remove('.svn')
			dest = 'debian/%s/usr/share/univention-management-console-frontend/js/dijit/themes/umc/icons/%s' % (self.module.package, dirname[len(self.module.icons):])
			if not os.path.exists(dest):
				dh_ucs.doIt('install', '-d', dest)
			for icon in files:
				dh_ucs.doIt('install', '-t', dest, '-m', '644', os.path.join(dirname, icon))

	def install_joinscript(self):
		join_script_base = '%s.inst' % (self.module.package,)
		join_scripts = [filename for filename in os.listdir('.') if filename.endswith(join_script_base)]
		if not join_scripts:
			return
		join_script = join_scripts[0]
		join_dest = os.path.join(self.destdir, 'usr/lib/univention-install')
		dh_ucs.doIt('install', '-d', join_dest)
		dh_ucs.doIt('install', '-t', join_dest, '-m', '755', join_script)
		return join_script

	def install_deb_scripts(self, join_script):
		with open(os.path.join('debian', '%s.postinst.debhelper' % (self.module.package,)), 'a') as f_postinst:
			if join_script:
				f_postinst.write('''
# run join script on DC master and DC backup
. /usr/share/univention-lib/base.sh
call_joinscript %s || true
''' % join_script)
			f_postinst.write('invoke-rc.d univention-management-console-server reload || true\n')
			f_postinst.write('''
# generate a new hash for the UMC frontend in order to avoid caching problems
. /usr/share/univention-lib/umc.sh
umc_frontend_new_hash
''')

		with open(os.path.join('debian', '%s.prerm.debhelper' % (self.module.package,)), 'a') as f_prerm:
			f_prerm.write('invoke-rc.d univention-management-console-server reload || true\n')


def main():
	parser = OptionParser(usage='usage: %prog [--core]')
	parser.add_option('-c', '--core', action='store_true', dest='core', help='do not require python, javascript, module-name and XML definition to be set')

	options, args = parser.parse_args()
	for package in dh_ucs.binary_packages():
		for module in dh_umc.read_modules(package, options.core):
			Module(module).dh_module_install()


if __name__ == '__main__':
	main()
