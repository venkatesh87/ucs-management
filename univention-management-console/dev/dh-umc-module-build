#!/usr/bin/python2.7
# -*- coding: utf-8 -*-
#
# Univention Management Console
"""
Install UMC modules. It parses a RFC 822 file called
$(package).umc-modules and installs the specified components of a module
into the correct directories.
"""
#
# Copyright 2011-2017 Univention GmbH
#
# http://www.univention.de/
#
# All rights reserved.
#
# The source code of this program is made available
# under the terms of the GNU Affero General Public License version 3
# (GNU AGPL V3) as published by the Free Software Foundation.
#
# Binary versions of this program provided by Univention to you as
# well as other copyrighted, protected or trademarked materials like
# Logos, graphics, fonts, specific documentations and configurations,
# cryptographic keys etc. are subject to a license agreement between
# you and Univention and not subject to the GNU AGPL V3.
#
# In the case you use this program under the terms of the GNU AGPL V3,
# the program is provided in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public
# License with the Debian GNU/Linux or Univention distribution in file
# /usr/share/common-licenses/AGPL-3; if not, see
# <http://www.gnu.org/licenses/>.

import sys
import os.path
from optparse import OptionParser

import univention.debhelper as dh_ucs
try:
	sys.path.insert(0, './dev')
	import dh_umc
except ImportError:
	import univention.dh_umc as dh_umc


def do_package(package, core):
	"""Compile translation files for package."""
	modules = dh_umc.read_modules(package, core)

	if not core:
		# build python PO files
		for module in modules:
			for po_file in module.python_po_files:
				if os.path.exists(po_file):
					dh_umc.create_po_file(po_file, package, module.python_files)
					dh_umc.create_mo_file(po_file)

		# build javascript PO files
		for module in modules:
			for po_file in module.js_po_files:
				if os.path.exists(po_file):
					dh_umc.create_po_file(po_file, package, module.js_files, 'Javascript')
					dh_umc.create_json_file(po_file)

	# build xml PO files
	for module in modules:
		for lang, po_file in module.xml_po_files:
			if os.path.exists(po_file):
				dh_umc.module_xml2po(module, po_file, lang)
				dh_umc.create_mo_file(po_file)


def main():
	# parse all options
	parser = OptionParser(usage='usage: %prog [--core]')
	parser.add_option('-c', '--core', action='store_true', dest='core', help='If specified only XML files are evaluated')

	options, args = parser.parse_args()
	for package in dh_ucs.binary_packages():
		do_package(package, options.core)


if __name__ == '__main__':
	try:
		main()
	except dh_umc.Error as exc:
		print >> sys.stderr, 'Error: %s' % (exc,)
		sys.exit(1)
